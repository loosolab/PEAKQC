# get the sctoolbox version as global variable 
extract-version:
  stage: .pre
  image: alpine
  script:
    - VERSION=$(python -c "import sys; sys.path.append('./peakqc'); from _version import __version__; print(__version__)")
    - echo "BUILD_VERSION=$VERSION"
    - echo "BUILD_VERSION=$VERSION" >> build.env
  artifacts:
    reports:
      dotenv: build.env # important for the build later
  rules:
    - when: always

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  image: docker:latest # image as building environment
  services:
      - name: "docker:dind" # docker in docker to build
        alias: docker
  before_script:
      - echo $BUILD_VERSION
      - apk update && apk add git # install git for authentification and pushing to registry
      - apt-get update -qq && apt-get install -y -qq git 
      - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin # login to registry
  script:
      - ls .
      - docker build --pull -t "$CI_REGISTRY_IMAGE:$BUILD_VERSION" -t "$CI_REGISTRY_IMAGE:latest" . # build the image from Dockerfile in the repository
      - docker push --all-tags "$CI_REGISTRY_IMAGE" # push image to registry
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"  # only for commits to dev
      changes:  # if any of the files were changed
        - setup.py
        - peakqc_env.yml
        - Dockerfile
        - peakqc/_version.py
    - when: manual    # or manually
      allow_failure: true


lint:
  image: 
    name: python:3.10 # pybedtools is not compatible with python 3.11
    entrypoint: [ '/bin/bash', '-c', 'ln -snf /bin/bash /bin/sh && /bin/bash -c $0' ]  # Fixes shell not found error (See Issue #129)
  inherit:
    default: false # do not inherit before_script
  stage: test
  tags:
    - coverage
  script:
    - python --version
    - pip install flake8
    - pip install pydoclint>=0.1.7
    - pip install flake8-docstrings  # adds pydocstyle to flake
    - flake8 peakqc setup.py tests --ignore=E501,W503,D202,DOC301,DOC105 --docstring-convention numpy --show-source --extend-exclude=peakqc/data,tests/data
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" # all MR
      changes:
      - setup.py
      - tests/*.py
      - peakqc/*.py


# Run test coverage
test coverage:
  stage: test
  image: "$CI_REGISTRY_IMAGE:$BUILD_VERSION"
  tags:
    - coverage
  coverage: '/TOTAL.*\s(\d*.\d*\%)/'
  script:
    - pip install .
    - pytest --cov-report=term --cov=./peakqc . --junitxml=pytest.xml --cov-report html:htmlcov --html=pytest.html --durations=0  # durations=0 shows the ranked duration of all tests for improving compute time
  artifacts:
    when: always
    paths:
      - pytest.xml
      - pytest.html
      - htmlcov
    reports:
      junit: pytest.xml
  rules:
    - if: $CI_COMMIT_BRANCH == "dev" # commits to dev (for coverage)
      changes:
      - tests/*.py
      - peakqc/*.py
    - if: $CI_COMMIT_BRANCH != "dev" && $CI_PIPELINE_SOURCE == "merge_request_event"  #all merge requests with changes
      changes:
      - tests/*.py
      - peakqc/*.py
    - when: manual
      allow_failure: True